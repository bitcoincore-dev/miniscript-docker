{"content":"From fdd28b6309517fbbaaffc901eec1d3824dbb3187 Mon Sep 17 00:00:00 2001\nFrom: @RandyMcMillan <randy.lee.mcmillan@gmail.com>\nDate: Thu, 9 Nov 2023 11:31:41 -0500\nSubject: [PATCH] miniscript-docker:initial commit\n\n---\n Dockerfile        |  27 +++++++++++++++++++++++++++\n GNUmakefile       |   3 +++\n README.md         |   1 +\n docker-build      | 104 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n miniscript-docker | 251 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n miniscript-run    |  38 ++++++++++++++++++++++++++++++++++++++\n serve             |  24 ++++++++++++++++++++++++\n 7 files changed, 448 insertions(+)\n create mode 100755 Dockerfile\n create mode 100644 GNUmakefile\n create mode 100644 README.md\n create mode 100755 docker-build\n create mode 100755 miniscript-docker\n create mode 100755 miniscript-run\n create mode 100755 serve\n\ndiff --git a/Dockerfile b/Dockerfile\nnew file mode 100755\nindex 0000000..d73167b\n--- /dev/null\n+++ b/Dockerfile\n@@ -0,0 +1,27 @@\n+FROM emscripten/emsdk:latest as base\n+RUN apt-get update\n+FROM base as systemd\n+RUN apt-get install systemd -y\n+RUN chmod +x /usr/bin/systemctl\n+FROM systemd as pandoc\n+RUN apt-get install pandoc -y\n+FROM pandoc as docker\n+RUN apt-get install docker.io -y\n+FROM docker as clone\n+EXPOSE 8080 8081\n+VOLUME /src\n+RUN git clone --depth 1 https://github.com/sipa/miniscript /src/miniscript\n+FROM clone as make\n+WORKDIR /src/miniscript\n+RUN make miniscript\n+FROM make as install\n+RUN install ./miniscript /usr/local/bin\n+WORKDIR /src\n+FROM install as miniscript\n+COPY --from=clone /src /src\n+COPY --from=clone /src/miniscript /src/miniscript\n+ENV PATH=$PATH:/usr/bin/systemctl\n+RUN ps -p 1 -o comm=\n+EXPOSE 8080 8081\n+ENTRYPOINT [\"bash\"]\n+CMD [\"make\"]\ndiff --git a/GNUmakefile b/GNUmakefile\nnew file mode 100644\nindex 0000000..6103da6\n--- /dev/null\n+++ b/GNUmakefile\n@@ -0,0 +1,3 @@\n+-:\n+\t./miniscript-docker\n+\t./miniscript-run\ndiff --git a/README.md b/README.md\nnew file mode 100644\nindex 0000000..0699736\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1 @@\n+## miniscript-docker\ndiff --git a/docker-build b/docker-build\nnew file mode 100755\nindex 0000000..8e6fa26\n--- /dev/null\n+++ b/docker-build\n@@ -0,0 +1,104 @@\n+#!/usr/bin/env bash\n+#\n+\n+##\n+function strip (){\n+(\\\n+    if [[ \"$(uname -s)\" == \"Linux\" ]]; \\\n+\tthen \\\n+\t\tsed -i  's/\\\\_\\\\_NOTOC\\\\_\\\\_//' *.md      >/dev/null  && \\\n+\t\tsed -i  's/\\\\_\\\\_NOTOC\\\\_\\\\_//' *.html    >/dev/null  && \\\n+\t\tsed -i  's/.md/.html/' index.html         >/dev/null; fi)\n+\t(\\\n+\tif [[ \"$(uname -s)\" == \"Darwin\" ]]; \\\n+\tthen \\\n+\t\tsed -i  '' 's/\\\\_\\\\_NOTOC\\\\_\\\\_//' *.md   >/dev/null  && \\\n+\t\tsed -i  '' 's/\\\\_\\\\_NOTOC\\\\_\\\\_//' *.html >/dev/null  && \\\n+\t\tsed -i  '' 's/.md/.html/' index.html      >/dev/null; fi)\n+    }\n+\n+##\n+function docker-start(){\n+(\\\n+    while ! docker system info > /dev/null 2>&1; do \\\n+    clear || true; \\\n+    echo 'Waiting for docker to start...';  \\\n+    if [[ \"$(uname -s)\" == \"Linux\" ]]; then \\\n+     systemctl restart docker.service; \\\n+    fi; \\\n+    if [[ \"$(uname -s)\" == \"Darwin\" ]]; then \\\n+        DOCKER=\"/Applications/Docker.app/Contents/MacOS/Docker\"; \\\n+     open --background -a $DOCKER; \\\n+    fi; \\\n+sleep 1;\\\n+done \\\n+)\n+}\n+docker-start\n+\n+DOCKER=$(which docker)\n+MINISCRIPT_PANDOC=miniscript-pandoc\n+$DOCKER build --target pandoc -t miniscript-pandoc .\n+\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"ls\"\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"ls -a\"\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"ls -l\"\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"ls -l *.md\"\n+## \n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"which pandoc\"\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"echo $(which pandoc)\"\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"/usr/bin/pandoc -h\"\n+## docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"/usr/bin/pandoc -h\"\n+\n+if [[ \"$1\" == \"--mediawiki\" ]] || [[ \"$1\" == \"-mw\" ]]; then\n+for f in $(ls *.mediawiki || true)\n+do\n+    echo $f\n+    docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"pandoc --quiet --ascii --from=mediawiki --to=markdown <(cat $f)\" | sed 's/__//' > $(sed 's/mediawiki/mw.md/g' <<< $f)\n+\n+done\n+fi\n+\n+if [[ \"$1\" == \"--markdown\" ]] || [[ \"$1\" == \"-md\" ]]; then\n+for f in $(ls *.md || true)\n+do\n+    echo $f\n+    docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"pandoc --standalone --quiet --ascii --from=markdown --to=html <(cat $f)\" | sed 's/__//' > $(sed 's/md/html/g' <<< $f)\n+\n+done\n+fi\n+\n+for f in $(ls README.md || true)\n+do\n+    echo $f;\n+    docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"pandoc --standalone --quiet --ascii --from=markdown --to=html <(cat $f)\" | sed 's/__//' > $(sed 's/md/html/g' <<< $f)\n+    cp readme.html index.html || echo true\n+done\n+\n+strip\n+\n+cp README.html index.html || true \n+exit\n+\n+while docker system info > /dev/null 2>&1; do\n+\n+for f in $(ls *.mediawiki || true)\n+do\n+    echo $f;\n+    command -v $DOCKER >/dev/null && docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` $MINISCRIPT_PANDOC:latest bash -c \"pandoc --preserve-tabs --ascii --from=mediawiki --to=markdown $f\" | sed 's/__NOTOC__//' > $(sed 's/mediawiki/md/g' <<< $f) || echo \"install docker\";\n+done\n+\n+for f in $(ls *.md || true)\n+do\n+    echo $f;\n+    command -v $DOCKER >/dev/null && docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` pandoc/latex:2.6 bash -c \"pandoc --preserve-tabs --ascii --from=markdown --to=html $f\" | sed 's/__NOTOC__//' > $(sed 's/md/html/g' <<< $f) || echo \"install docker\";\n+done\n+\n+for f in $(ls README.md || true)\n+do\n+    echo $f;\n+    command -v $DOCKER >/dev/null && docker run --rm --volume \"`pwd`:/src\" --user `id -u`:`id -g` pandoc/latex:2.6 bash -c \"pandoc --preserve-tabs --ascii --from=markdown --to=html $f\" | sed 's/__NOTOC__//' > $(sed 's/md/html/g' <<< $f) || echo \"install docker\";\n+    cp readme.html index.html || echo true\n+done\n+\n+done\ndiff --git a/miniscript-docker b/miniscript-docker\nnew file mode 100755\nindex 0000000..3d0f629\n--- /dev/null\n+++ b/miniscript-docker\n@@ -0,0 +1,251 @@\n+#!/usr/bin/env bash\n+\n+[[ -z \"$(command -v miniscript-docker)\" ]] && \\\n+        install $0 /usr/local/bin || true\n+\n+PORT=${PORT:80}\n+VERBOSE=${VERBOSE:-\t}\n+\n+FORCE=${FORCE:-\t}\n+NOCACHE=${NOCACHE:-\t} ## default rebuild without --no-cache\n+TAG=${TAG:-miniscript}\n+\n+PYTHON3=$(which python3)\n+\n+if [[ \"$(uname -s)\" == \"Darwin\"  ]];\n+then\n+    DOCKER=${DOCKER:-\"/Applications/Docker.app/Contents/MacOS/Docker\"}\n+fi\n+## echo $DOCKER; ##exit\n+## [[ -z \"$DOCKER\" ]] && echo \"????\" && DOCKER=${DOCKER:docker}\n+\n+## MINT_000\n+\n+## MINT_001\n+\n+## MINT_002\n+MINT_002_1=\"thresh(3,pk(XPUB1),s:pk(XPUB2),s:pk(XPUB3),s:pk(XPUB4),s:pk(XPUB5),snu:older(100),snu:older(200))\"\n+MINT_002_2=\"thresh(3,pk(XPUB1),s:pk(XPUB2),s:pk(XPUB3),s:pk(XPUB4),s:pk(XPUB5),snu:after(1694563200),snu:after(1694563200))\"\n+MINT_002_3=\"thresh(3,pk(XPUB1),s:pk(XPUB2),s:pk(XPUB3),s:pk(XPUB4),s:pk(XPUB5),snu:after(1694563200),snu:after(1694476800))\"\n+MINT_002_4=\"thresh(3,pk(XPUB1),s:pk(XPUB2),s:pk(XPUB3),s:pk(XPUB4),s:pk(XPUB5),snu:older(4194400),snu:older(4194500))\"\n+\n+## MINT_003\n+MINT_003=\"or(99@thresh(2,thresh(2,pk(A1),pk(A2),pk(A3),after(1004)),or(10@thresh(2,pk(P1),pk(P2),pk(P3),after(1002)),and(thresh(1,pk(SA1),pk(SA2),pk(SA3)),after(1003)))),and(thresh(2,pk(M1),pk(M2),pk(M3)),after(1005)))\"\n+\n+## MINT_004\n+MINT_004=\"or(99@thresh(3,thresh(2,pk(P1),pk(P2),pk(P3),after(1002),after(1003)),thresh(2,pk(A1),pk(A2),pk(A3),after(1004)),thresh(1,pk(SA1),pk(SA2),pk(SA3))),1@and(thresh(2,pk(M1),pk(M2),pk(M3)),after(1005)))\"\n+\n+function docker-start(){\n+\n+\t( \\\n+\t    while ! docker system info > /dev/null 2>&1; do\\\n+\t    echo 'Waiting for docker to start...';\\\n+        ## echo $DOCKER\n+\t    if [[ \"$(uname -s)\" == \"Linux\" ]]; then\\\n+\t     systemctl restart docker.service;\\\n+\t    fi;\\\n+\t    if [[ \"$(uname -s)\" == \"Darwin\" ]]; then\\\n+            DOCKER=\"/Applications/Docker.app/Contents/MacOS/Docker\";\\\n+\t     open --background -a $DOCKER;\\\n+\t    fi;\\\n+\tsleep 1;\\\n+\tdone\\\n+\t)\n+\n+}\n+function examples(){\n+\n+printf \"\n+thresh(2,pk(XPUB1),s:pk(XPUB2),s:pk(XPUB3),snl:older(100))\n+\"\n+printf \"\n+and_v(or_c(pk(B),or_c(pk(C),v:older(1000))),pk(A))\n+\"\n+printf \"\n+and(pk(A),or(pk(B),or(9@pk(C),older(1000))))\n+\"\n+printf \"\n+and(pk(A),or(pk(B),or(9@pk(C),older(1000))))\n+\"\n+printf \"\n+and(pk(A),or(pk(B),or(9@pk(C),older(1000))))\n+\"\n+printf \"\n+$MINT_002_1\n+\"\n+printf \"\n+$MINT_002_2\n+\"\n+printf \"\n+$MINT_002_3\n+\"\n+printf \"\n+$MINT_002_4\n+\"\n+printf \"\n+$MINT_003\n+\"\n+    printf \"\n+$MINT_004\n+\"\n+exit\n+}\n+\n+function help {\n+\n+    printf \"Usage:\\n\"\n+    printf \"\\n\"\n+    printf \"  miniscript-docker\\n\"\n+    printf \"\\n\"\n+    printf \"  miniscript-docker examples\\n\"\n+    printf \"\\n\"\n+    printf \"  miniscript-docker help  [-h --help]\\n\"\n+    printf \"  miniscript-docker build [-b --build]\\n\"\n+    printf \"\\n\"\n+    printf \"  miniscript-docker run '<miniscript>'\"\n+    printf \"\\n\"\n+    exit;\n+}\n+\n+function build(){\n+\n+    echo $DOCKER\n+    echo $NOCACHE\n+    [ \"$NOCACHE\" ]      && $(which docker) build --no-cache -t $TAG . && exit;\n+    [ ! -z \"$NOCACHE\" ] && $(which docker) build $NOCACHE   -t $TAG . && exit;\n+\n+}\n+\n+function run(){\n+\n+    docker-start\n+    echo $2\n+    docker \\\n+        run \\\n+        --rm \\\n+        -v $PWD:/src \\\n+        $TAG \\\n+        sh \\\n+        -c \"echo '$2' | ./miniscript-run\";exit;\n+\n+    ## echo $1\n+    docker \\\n+        run \\\n+        --rm \\\n+        -v $PWD:/src \\\n+        $TAG \\\n+        sh \\\n+        -c \"echo '$1' | miniscript\";\n+    echo $2\n+\n+}\n+function shell (){\n+\n+    docker-start\n+    docker \\\n+        run \\\n+        -t \\\n+        -i \\\n+        --rm \\\n+        -p 127.0.0.1:$PORT:8080/tcp \\\n+        -v `pwd`:/src miniscript bash\n+}\n+## argparse\n+## position $1\n+## echo \"\\${!#}=${!#}\"\n+while test $# -gt 0\n+do\n+    case \"$1\" in\n+        start) docker-start; exit\n+            ;;\n+        verbose) VERBOSE=1; echo $VERBOSE\n+            ;;\n+        --verbose) VERBOSE=1; echo $VERBOSE\n+            ;;\n+        -v) VERBOSE=1; echo $VERBOSE\n+            ;;\n+        help) help;\n+            ;;\n+        --help) help;\n+            ;;\n+        -h) help;\n+            ;;\n+        --force) FORCE=--force; ## echo FORCE=$FORCE\n+            ;;\n+        -f)      FORCE=--force; ## echo FORCE=$FORCE\n+            ;;\n+        build) build\n+            ;;\n+        --build) build\n+            ;;\n+        -b) build\n+            ;;\n+         b) build\n+            ;;\n+        make) make\n+            ;;\n+        --make) make\n+            ;;\n+        -m) make\n+            ;;\n+        run) RUN=TRUE && run $2 $3 $4\n+            ;;\n+        shell) shell\n+            ;;\n+        examples) examples\n+            ;;\n+        --examples) examples\n+            ;;\n+        -e) examples\n+            ;;\n+        --*) echo \"bad option $1\"\n+            ;;\n+        *) echo \"argument $1\"\n+            ;;\n+    esac\n+    shift\n+done\n+## position $2\n+while test $# -gt 1\n+do\n+    case \"$2\" in\n+        ## support docker-miniscript build -f\n+        ##         docker-miniscript -f build\n+        start) docker-start; exit\n+            ;;\n+        verbose) VERBOSE=1; echo $VERBOSE\n+            ;;\n+        --verbose) VERBOSE=1; echo $VERBOSE\n+            ;;\n+        -v) VERBOSE=1; echo $VERBOSE\n+            ;;\n+        --force) FORCE=--force; ## echo FORCE=$FORCE\n+            ;;\n+        -f) FORCE=--force;      ## echo FORCE=$FORCE\n+            ;;\n+        build) build\n+            ;;\n+        --build) build\n+            ;;\n+        -b) build\n+            ;;\n+        make) make\n+            ;;\n+        --make) make\n+            ;;\n+        -m) make\n+            ;;\n+        examples) examples\n+            ;;\n+        --examples) examples\n+            ;;\n+        -e) examaples\n+            ;;\n+        --*) echo \"bad option $1\"\n+            ;;\n+        *) echo \"argument $1\"\n+            ;;\n+    esac\n+    shift\n+done\n+help\ndiff --git a/miniscript-run b/miniscript-run\nnew file mode 100755\nindex 0000000..4aaae07\n--- /dev/null\n+++ b/miniscript-run\n@@ -0,0 +1,38 @@\n+#!/usr/bin/env bash\n+\n+[[ -z \"$(command -v miniscript-run)\" ]] && \\\n+install $0 /usr/local/bin\n+\n+function help(){\n+    echo \"miniscript-run '<miniscript>'\";\n+    echo \"miniscript-run 'pk_h(test)'\";exit\n+}\n+if [[ \"$1\" == \"help\" ]] || [[ \"$1\" == \"-h\" ]]; then\n+    help; exit\n+fi\n+\n+function install(){\n+\n+    [ ! -d miniscript ] && \\\n+        $(which git) clone --depth 1 https://github.com/sipa/miniscript.git\n+\n+    cd miniscript && \\\n+        make >/dev/null && \\\n+        install miniscript /usr/local/bin 2>/dev/null && \\\n+        file miniscript && \\\n+        cd .. || file echo $(which miniscript);\n+\n+##     [[ -z \"$(command -v miniscript-run)\" ]] && \\\n+##         install $0 /usr/local/bin || \\\n+##         echo $(which miniscript-run);exit\n+}\n+if [[ \"$1\" == \"install\" ]]; then\n+    install; exit\n+fi\n+#\n+for var in \"$@\"\n+do\n+    echo \"$var\" | $(which miniscript) 2>/dev/null;exit || \\\n+    echo \"$var\" | ./miniscript/miniscript;exit || help\n+done\n+help\ndiff --git a/serve b/serve\nnew file mode 100755\nindex 0000000..fa959d2\n--- /dev/null\n+++ b/serve\n@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+# avoid some errors\n+touch favicon.ico\n+touch apple-touch-icon.png\n+touch apple-touch-icon-precomposed.png\n+\n+# Start an HTTP server from a directory, optionally specifying the port\n+\n+# Usage:\n+# ./serve or ./serve 1234\n+\n+function serve() {\n+\tlocal port=\"${1:-8080}\";\n+\tsleep 1 && open \"http://localhost:${port}/\" &\n+\n+\t# Set the default Content-Type to `text/plain` instead of `application/octet-stream`\n+\t# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)\n+\n+    $(python -c $'import SimpleHTTPServer;\\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\\nmap[\"\"] = \"text/plain\";\\nfor key, value in map.items():\\n\\tmap[key] = value + \";charset=UTF-8\";\\nSimpleHTTPServer.test();' \"$port\";)\n+}\n+\n+port=\"${1:-8080}\";\n+npx http-server -p $port -o 2>/tmp/serve.log || serve 2>/tmp/serve.log || echo \"install npx or python@2.7\"\n--\nlibgit2 1.6.4\n\n","created_at":1699547751,"id":"48961eca17bc1fef6b86cb11d09919b29e247be0b8311f048cadcbc656f22e0c","kind":410,"pubkey":"a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd","sig":"72463153306181b51f71b3b6df1a52efd8c6ac801e97e622ff67685ed62d6dd3bfc2a69df1ae5cbdf9b01dab557543c7286c569e505412063a8b5a882723d67a","tags":[["repo","9c5dc6ce17cab1602213aed662fdab5b91e864b4949b242a4d4350b87c02362b"],["e","9c5dc6ce17cab1602213aed662fdab5b91e864b4949b242a4d4350b87c02362b"],["branch","9c5dc6ce17cab1602213aed662fdab5b91e864b4949b242a4d4350b87c02362b"],["e","9c5dc6ce17cab1602213aed662fdab5b91e864b4949b242a4d4350b87c02362b"],["commit-message","miniscript-docker:initial commit\n"],["t","gnostr-event"],["t","gnostr-format-0.0.0"],["commit","fdd28b6309517fbbaaffc901eec1d3824dbb3187"],["t","initial-commit"]]}